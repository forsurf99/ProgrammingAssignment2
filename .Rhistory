a <- available.packages()
head(rownames(a), 3)
find.packages("KernSmooth")
find.package("KernSmooth")
library(KernSmooth)
q()
q()
x <- c(1,2,3,4,5)
x
y <- c(x,0,x)
y
1/x
v <- 2*x + y  1
v <- 2*x + y + 1
v
max(x)
min(x)
length(x)
names(x)
names(x) <- "name-1"
names(x)
names(x) <- c("a", "b", "c", "d", "e")
names(x)
range(x)
sum(x)
mean(x)
var(x)
x1 <- c(1,3,5)
y1 <- c(2,4,6)
max(c(x1,y1))
min(c(x1,y1))
pmax(c(x1,y1))
y1 <- c(2,4,6,8,10)
pmax(c(x1,y1))
pmax(x1)
pmin(x1)
x1 + 1
is.na(x)
x[is.na(x)]
x[!is.na(x)]
x[t]
x[T]
x[F]
x[c(T,T,T,F,F)]
x>0
x[9]
x[1]
x[1,3]
x[1:2]
x[c(1,3)]
x[c(T)]
x[c(T,F)]
x[c(F,F)]
-x
q()
x
ls
names
q()
x
names(x)
x[c(T,F,T,F,T)]
x[c(T,F,T,F)]
x[c(T,F,T)]
x[c(T)]
x[c(T,F)]
c(T,F)
x[c(T,F, F)]
x["a"]
x["e"]
q()
x
seq_along(x)
seq_len(x)
seq_len(3)
f1 < function (a, b) {
a^2
}
f1 <- function (a, b) {
a^2
}
f1(2)
f1(b=2)
search()
ls
list()
list
dir
dir()
lm
?
sldkfm
? lm
.GlobalEnv
library
library()
q()
swirl()
library("swirl")
rm(list=ls())
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq = seq(0, 10, length=30)
my_seq = seq(0, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(qlong.with=my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Sandeep")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", Z"), sep="")
paste(1:3, c("X", "Y", Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_data)
sum(my_na)
my_data
0/0
Inf-Inf
q()
ls()
rm(ls())
rm(list=ls())
ls()
swirl()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0 ]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[ c("foo", "bar") ]
?matrix
m1 <- matrix(c(1:4),2,2)
m1
m2 <- solve(m1)
m2
m3 <- m1 %*% m2
m3
m4 <- m1*m2
m4
q()
ls()
m1
is.matrix(m1)
m4
m3
q()
rm(list=ls())
library(datasets)
data(iris)
?iris
iris
names(iris)
iris[1]
iris
d1 <- iris[ iris[,5]="virginica"]
d1 <- iris[ iris[,5]=="virginica"]
d1 <- iris[,5]=="virginica"
d1
d2 <- iris[iris[,5]=="virginica"]
d2 <- iris[iris[,5]=="virginica",]
d2
d2[1]
mean(d2[1])
mean(d2[1],)
mean(d2[,1])
d2[,1]
mean(d2[,1])
colMeans(iris)
colMeans(iris[,1:4])
colMeans(d2)
colMeans(d2[])
colMeans(d2[,])
colMeans(d2[,1])
d2
colMeans(d2[,1:4])
?apply
colMeans(iris[,1:4])
apply(iris[,1:4], 2, mean)
rm(list=ls())
library(datasets)
data(mtcars)
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
?split
mtcars
sapply(split(mtcars$hp, mtcars$cyl), mean)
hp1 <- sapply(split(mtcars$hp, mtcars$cyl), mean)
hp1
class(hp1)
?abs
hp1[8] - hp1[1]
hp1[2] - hp1[1]
hp1[3]
hp1[3] - hp1[1]
debug(ls)
ls()
?
>
1
2
exit()
bye
exit
q()
q()
next()
return()
ls()
stop()
stop
/debug
?debug
undebug(ls)
ls()
rm(list=ls())
dir()
m1 <- matrix(c(1:4), 2,2)
m1
m2 <- solve(m1)
m2
m3 <- m1 %*% m2
m4 <- m1*m2
m4
m3
getwd()
source("cachemean.R")
y <- numeric(1:5)
y <- numeric(c(1:5))
y<- 1:5
x <- makeVector()
x
x$set(y)
x
x$get()
z <- cachemean(x)
z
x$getmean()
z <- cachemean(x)
a <- matrix()
a
class(x)
z1 <- 1:2
z1$get()
z1 <- list()
z1$get()
source("cachematrix.R")
source("cachematrix.R")
m1 <- makeCacheMatrix()
m1
m2 <- matrix(1:4, 2, 2)
m2
m1$set(m2)
m1$get()
m3 <- cacheSolve(m1)
m3 <- cacheSolve(m1)
m3
m1$getInverse()
m1$get()
m4 <- makeCacheMatrix()
m5 <- cacheSolve(m4)
m5
m4
m4$get()
m1$get()
m6 <- m1$get()
m6
m6[2,2] <- 0
m6
m1$get()
m7 <- matrix(1:4,2,2)
m1 == m7
m2 == m7
rm(list=ls())
ls()
source("cachematrix.R")
mvale1 <- matrix(1:4,2,2)
mval1 <- matrix(1:4,2,2)
mval1
source("cachematrix.R")
mval1 <- matrix(1:4,2,2)
source("cachematrix.R")
m1 <- makeCacheMatrix()
m1$set(mval1)
dim(m)
dim(m1$get())
dim(mval1)
dim(m1$get()) == dim(mval1)
identical(m1$get(), mval1)
identical(m1$get(), NULL)
identical(NULL, NULL)
l1 <- list()
identical(mval1, l1)
source("cachematrix.R")
m1 <- makeCacheMatrix()
m1$get()
m1$set(mval1)
m1$set(mval1)
m1 <- makeCacheMatrix()
m1$set(mval1)
source("cachematrix.R")
m1 <- makeCacheMatrix()
m1$set(mval1)
m1$set(mval1)
source("cachematrix.R")
m1 <- makeCacheMatrix()
m1$set(mval1)
m1$set(mval1)
source("cachematrix.R")
m1 <- makeCacheMatrix()
m1$set(mval1)
m1$set(mval1)
m1$set(mval1)
m2 <- cacheSolve(m1)
m2
m2 <- cacheSolve(m1)
mval2 <- matrix(1:4,2,2)
m1$set(mval2)
mval3 <- matrix(3:6,2,2)
m1$set(mval3)
m2 <- cacheSolve(m1)
m2 <- cacheSolve(m1)
m2
solve(NULL)
q()
